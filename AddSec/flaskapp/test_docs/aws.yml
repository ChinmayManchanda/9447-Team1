on:
  push:
    branches:
      - main

name: Deploy to Amazon ECS
jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Nix Install 
        id: nix-install
        uses: cachix/install-nix-action@v13
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      
      - name: Nix Build image 
        id: build
        run: |
          nix-build devenv-docker.nix
          docker load < result | egrep -o "docker.*" | { read message; echo "::set-output name=image::$message"; }
      
      - name: Tag image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-ecr-repo
          IMAGE_TAG: latest
        run: |
          echo ${{ steps.build.outputs.image }}
          docker tag ${{ steps.build.outputs.image }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.build-image.outputs.image }}
          args: --file=Dockerfile
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif
      
      - name: Push image to Amazon ECR
        id: nix-build
        run: |
          docker push ${{ steps.build-image.outputs.image }}
          
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: flask-app
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: flask-app
          cluster: flask-app
          wait-for-service-stability: false
      
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.14.0
        with:
          channel-id: 'C029UCWE8A2' # Slack channel id to post message
          slack-message: |
            Snyk image-scanning report: https://github.com/TirthParikh27/AddSEC-demo/security/code-scanning,
            Zap report: https://github.com/TirthParikh27/AddSEC-demo/issues,
            SonarCloud SAST report: https://sonarcloud.io/dashboard?id=TirthParikh27_AddSEC-demo
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          
      - name: ZAP DAST Scan
        uses: zaproxy/action-full-scan@v0.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: http://flask-app-319191450.us-east-2.elb.amazonaws.com/
          fail_action: true
          
